apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "molt-lms.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "molt-lms.labels" . | nindent 4 }}
    release: {{ .Values.lms.releaseName }}
  {{- with .Values.lms.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.lms.replicaCount }}
  selector:
    matchLabels:
      {{- include "molt-lms.selectorLabels" . | nindent 6 }}
      release: {{ .Values.lms.releaseName }}
  template:
    metadata:
    {{- with .Values.lms.annotations }}
      annotations: {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "molt-lms.selectorLabels" . | nindent 8 }}
        release: {{ .Values.lms.releaseName }}
      {{- with .Values.lms.labels }}
        {{- toYaml . | nindent 4 }}
      {{- end }}
      {{- with .Values.labels }}
        {{- toYaml . | nindent 4 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "molt-lms.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: molt-lms
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args: [
          "./molt-lms {{ .Values.lms.sourceDialect }}"
          ]
          env:
            {{- if .Values.lms.configSecretName }}
            - name: LMS_READ_CONFIG_FILE
              value: "true"
            {{- end }}
            - name: LMS_SHADOW_MODE
              value: {{ .Values.lms.shadowMode }}
            - name: LMS_LOGGING
              value: {{ .Values.lms.logLevel }}
          {{- with .Values.lms.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: lms
              containerPort: {{ .Values.lms.service.port }}
            - name: metrics
              containerPort: {{ .Values.lms.service.metricsPort }}
          readinessProbe:
            httpGet:
              path: /vars
              port: metrics
          resources:
            {{- toYaml .Values.lms.resources | nindent 12 }}
      {{- if or .Values.lms.configSecretName .Values.lms.sslVolumes .Values.lms.sslVolumeMounts }}
          volumeMounts:
            {{- if .Values.lms.configSecretName }}
            - mountPath: "/app/configs"
              name: {{ .Values.lms.configSecretName }}
              readOnly: true
            {{- end }}
            {{- with .Values.lms.sslVolumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.lms.configSecretName }}
        - name: {{ .Values.lms.configSecretName }}
          secret:
            secretName: {{ .Values.lms.configSecretName }}
        {{- end }}
        {{- with .Values.lms.sslVolumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end}}
      {{- with .Values.lms.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
